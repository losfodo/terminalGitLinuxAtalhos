<h1>github comandos</h1>

<p># Github entra no arquivo com comando: vi Read.md</p>
<p>criando anotaçoes: 'vi' ou 'vim' nome arquivo qualquer bloco notas. //exemplo: vi Read.md
escrever bloco: i</br>
sair modo anotação: esc</br>
':'escrever comando e 'w' salvar e 'q'sair bloco notas: :wq</p>
<p>ls: para ver todos os arquivos e notas.</p>
<p>git status: ver como esta repositorio no momento.</p>
<p>git add 'nome do arquivo': adicinar ao index ou git status preparando p/ github.</br>
git commit -m "comentario qualquer": adicionar com numero e revisão vista por todos.</p>
<p>git log: ver o nome e email e commit'arquivo' enviado.</br>
git log --decorate: ver o commit em mais detalhes.</br>
git log --author="rafa ou nome qualquer": procurar os commits com nome especifico.</br>
git shortlog: ver quantidades autores detalhes.</br>
git shortlog -sn: nomes dos commit geral.</br>
git log --graph: mostra em forma grafica os commits.</p>
<p>git show 'numero série especifica commit': ver commit especifico e detalhes quem oque.</p>
<p>git diff: ver a modificação ultima feita.</br>
git diff --name-only: ver o nome de todos os arquivos modificados.
</p>
<p>git checkout + 'nome do arquivo': resete o arquivo antes da edição ou seja a ultima edição feita</p>
<p>git help: mostra todos os comandos do github</br>
<p>clear: apenas limpa terminal cheio de escritas e comandos</p>


<!---------------------------------->


<h3>conectando se ao git</h3>
<p>git version: versão atual do seu git</br>
<p>git config --global user.name "colocar nome": coloca meu nome</br>
<p>git config --global user.email "colocar meu email": conecta seu email ao git</br>
<p>git config user.name:ver se o nome esta conectado</br>
<p>git config user.email:ver se o email esta conectado</br>
<p>git config --global core.editor"mudar editor que atualmente e sublime para o que quiser"</br>
<p>git config --list    : mostrar tudo do git listra de varias informaçoes</p>	
<p>mkdir "nome da pasta": para criar uma pasta onde vc esta no momento</br>
<p>ls: ver todos os programas pasta blabla</br>
<p>pwd: ver onde vc esta </br>
<p>cd git-/   :''algum lugar que vc quer ir pasta no linux  ou windows''</br>
<p>code: abre o code text</br>
	<p>ls -a: para ver as pastas que estão ocultas</p>
	<p>git clone link http ou ssh: pego no gitlab </p>
	<p>npm install --global yarn    : instalar o yarn na maquina </p>
	<p>yarn version    : ver a versão do yarn</p>
	<p>yarn : baixa as dependencias do projeto com yarn</p>
yarn serve   : para subir o projeto para uso
git checkout develop


	<h3>criar repositorio passos</h3>
	<p>mkdir git-nomepastadoprojeto     :criar uma pasta no git</p>
	<p>git init     : estando da pasta com cd faz git init para inicializar repositorio </p>
	<p>ls -la :    mostra os diretorios e pasta do git criadas</p>
	<p>cd .git/    : sair da pasta de projeto ir para git pasta oculta </p>
	<p>cd ..     : ir para outro lugar de onde estava voltar pasta...</p>
	<p>botão direito mouse + git bash here na pasta que vai colocar projetos e repositorios</p>
	<p>git clone + linkrepositorio: botão direito mouse + paste para colar/cria pasta desejada</p>
	<p>ls: para ver nome da pasta se ta criado direitinho</p>
	<p>cd + nomedapasta/   : entra na pasta desejada para colocar seus codes</p>
	<p>pwd: ver se esta na pasta correta/ver onde vc esta</p>
	<p>mkdir + pastacriarnova:criar uma nova pasta</p>
	<p>touch + estapasta/criaarquivonestapasta: criar um arquivo na pasta escolhida</p>
	<p>cd ..:volta uma pasta ou (fecha e abri com gith bash here) como preferir</p>
	<p>git status: para ver detalhes se ta tudo certo apenas</p>
	<p>git add *: adicionar o arquivo a pasta incluso status</p>
	<p>git status: para ver detalhes se ta tudo certo se  arquivo pasta incluidos</p>
	<p>git commit -m "comentario que vc quiser": dando commit na pasta e arquivo</p>
	<p>git push: vai aparecer tela para colocar email senha(repositorio criado)</p>
	<p>code .:ir no code studios e o '.' vai para projeto da pasta</p>
	<p>git pull</p>
	<p>git checkout develop   : troca de branch tava na branch master vai para develop de desenvolvimento</p>
	<p>git checkout -b "rafa-changes"   : cria uma change de trabalho git</p>
	code .    : abrir vs code

github

	create new file no github clicando digitando nome
para criar pastinhas digita e usar / entrar	

   fetch:atualização.. vai no repositorio com os prog e da fetch o que faz no github verifica a versão q esta e na maquina e atualiza se esta igual como se precisa fazer push ou pull 
   repositorio local:pasta local git do notebook no caso, para saber se pasta versionada ver em items ocultos .git na pasta
   repositorio remoto: do site programador github
   commit:Commit é um pacote de alterações feitas no repositório local git. Cada commit possui arquivos alterados, autor e uma mensagem de resumo. Agora o arquivo está pronto para ser empacotado em um commit. Escreva o comando de commit incluindo uma mensagem que explique o que sua alteração faz no repositório.
   .gitignore: Git deve ignorar quando você estiver trabalhado nos repositórios, de forma que seja possível evitar a adição de arquivos indesejados no repositório sem dificuldades, tornando os arquivos indesejados totalmente invisíveis ao Git.
   readme: descrição das mudanças feitas no git
   push:mandar arquivos do git repositorio local para o servidor repositorio remoto ou seja para o github
   pull:puxar arquivos do servidor github repositorio remoto para o git notebook repos. local
   clonar:pegar repositorio de alguém no github clica em download no Github em um repositorio vai p Github desktop e cria uma pasta no git, mas não pode modifica-la e depois fazer push disso para seu github, apenas fazendo um fork, issues e branches
   Colocando ou versionando no git proj antigos:só arrastar a pasta do proj para o gitprojetos ir Desktopgithub q vai detectar e clicar em commit
   .gitignore: ignorar arquivos e pastas desnecessários pra ir no github
   Fork:para colocar arquivos de outra pessoa  pegas no clone e colocar no seu próprio github
   *Issues mensagem para programadores q publicam em seu repositorio remoto github
   Branches:fazendo um projeto vc faz várias branches diferentes do projeto tipo branche bacend e branche frontend pra garantir até fazer um Marge q pega essa fit back e front uni os dois e joga no ramo branche master

   
    <p>npm install --global yarn    : instalar o yarn na maquina </p>
	<p>yarn version    : ver a versão do yarn</p>
	<p>yarn : baixa as dependencias do projeto com yarn</p>
yarn serve   : para subir o projeto para uso

duvidas?
<p>git checkout develop   : troca de branch tava na branch master vai para develop de desenvolvimento</p>
	<p>git checkout -b "rafa-changes"   : cria uma change de trabalho git</p>